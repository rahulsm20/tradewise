// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String        @id @default(cuid())
  userId       String?       @unique
  name         String?
  assets       Asset[]
  stocks       Stock[]
  expenditures Expenditure[]
  incomes      Income[]
  debts        Debt[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
}

model Stock {
  id        String   @id @default(cuid())
  symbol    String
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum AssetType {
  STOCK
  CRYPTO
}

model Asset {
  id        String   @id @default(cuid())
  value     Float
  name      String
  type      String
  userId    String
  date      DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Expenditure {
  id        String   @id @default(cuid())
  value     Float
  name      String
  userId    String
  date      DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Income {
  id        String   @id @default(cuid())
  value     Float
  source    String
  userId    String
  date      DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Debt {
  id           String   @id @default(cuid())
  name         String
  amount       Float
  startDate    DateTime
  interestRate Float
  userId       String
  user         User     @relation(fields: [userId], references: [id])
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}
